#!/usr/bin/env python3

import sys
import math
import fileinput
from operator import itemgetter

min_points = []
min_dist = sys.float_info.max

def dist(p1, p2):
    return float(trunc(math.sqrt((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)))

def trunc(num):
    s = '{}'.format(num)
    if 'e' in s or 'E' in s:
        return '{0:.{1}f}'.format(num,7)
    i, p, d = s.partition('.')
    return '.'.join([i, (d+'0'*7)[:7]])

def isNum(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

def brute(data):
    global min_points
    global min_dist
    for i in range(0,len(data)):
        for j in range(i+1,len(data)):
            if dist(data[i],data[j]) <= min_dist:
                if min_dist != dist(data[i],data[j]):
                    min_points = []
                min_dist = dist(data[i],data[j])
                if [data[i],data[j]] not in min_points and [data[j],data[i]] not in min_points:
                    min_points.append(sorted([data[i],data[j]], key=itemgetter(0,1)))
    return
   
def basic_closest(data):
    global min_points
    global min_dist
    if len(data) <= 3:
        brute(data)
        return

    median_idx = int(len(data)/2)
    median = data[median_idx]

    basic_closest(data[:median_idx])
    basic_closest(data[median_idx:])

    mid = []
    for point in data:
        if abs(point[0] - median[0]) <= min_dist:
            mid.append(point)

    y_sorted = sorted(mid, key=itemgetter(1))

    for i in range(0,len(y_sorted)):
        for j in range(i+1,len(y_sorted)):
            if (y_sorted[j][1] - y_sorted[i][1]) > min_dist:
                break
            if dist(y_sorted[i],y_sorted[j]) <= min_dist:
                if min_dist != dist(y_sorted[i],y_sorted[j]):
                    min_points = []
                min_dist = dist(y_sorted[i],y_sorted[j])
                if [y_sorted[i],y_sorted[j]] not in min_points and [y_sorted[j],y_sorted[i]] not in min_points:
                    min_points.append(sorted([y_sorted[i],y_sorted[j]], key=itemgetter(0,1)))
    return

def optimal_closest(data_x, data_y):
    global min_points
    global min_dist
    if len(data_x) <= 3:
        brute(data_x)
        return

    median_idx = int(len(data_x)/2)
    median = data_x[median_idx]

    y_left = []
    y_right = []
    for point in data_y:
        if point[0] < median[0]:
            y_left.append(point)
        else:
            y_right.append(point)

    optimal_closest(data_x[:median_idx],y_left)
    optimal_closest(data_x[median_idx:],y_right)

    mid = []
    for point in data_y:
        if abs(point[0] - median[0]) <= min_dist:
            mid.append(point)

    for i in range(0,len(mid)):
        for j in range(i+1,len(mid)):
            if (mid[j][1] - mid[i][1] > min_dist):
                break
            if dist(mid[i],mid[j]) <= min_dist:
                if min_dist != dist(mid[i],mid[j]):
                    min_points = []
                min_dist = dist(mid[i],mid[j])
                if [mid[i],mid[j]] not in min_points and [mid[j],mid[i]] not in min_points:
                    min_points.append(sorted([mid[i],mid[j]], key=itemgetter(0,1)))
    return

if len(sys.argv) != 2:
    print("Program takes one argument: ./closestPair [brute|basic|optimal]")
    sys.exit()

mode = sys.argv[1]
data = []

for line in sys.stdin:
    if len(line.split()) == 2 and (isNum(point) == True for point in line.split()):
        data.append(tuple(float(trunc(point)) for point in line.split()))

data = list(set(data))

if mode == "brute":
    brute(data)
elif mode == "basic":
    x_sorted = sorted(data, key=itemgetter(0,1))
    basic_closest(x_sorted)
elif mode == "optimal":
    x_sorted = sorted(data, key=itemgetter(0,1))
    y_sorted = sorted(data, key=itemgetter(1,0))
    optimal_closest(x_sorted,y_sorted)
else:
    print("Program only runs in [brute|basic|optimal] modes")
    sys.exit()

min_points = sorted(min_points, key=itemgetter(0,1))

print("closest pair distance: " + str(min_dist))
for point in min_points:
    print(' '.join(map(str,point)))

sys.exit()



